events {
	worker_connections 1024;
}

env HOSTNAME;
env POD_IP;
env POD_NETMASK;
env POD_DEFGW;
env POD_UID;

http {
	default_type 'text/plain';
	client_max_body_size 10m;

	init_by_lua_block {
		local template = require("template")
		-- template syntax documented here:
		-- https://github.com/bungle/lua-resty-template/blob/master/README.md
		tmpl = template.compile([[


Pod Information:
	Pod Hostname: {{os.getenv("HOSTNAME") or "N/A"}}
	Pod IP:	{{os.getenv("POD_IP") or "N/A"}}
        Pod Netmask: {{os.getenv("POD_NETMASK") or "N/A"}}
        Pod Default GW: {{os.getenv("POD_DEFGW") or "N/A"}}
        Pod UID: {{os.getenv("POD_UID") or "N/A"}}


Request Information:
	client_address={{ngx.var.remote_addr}}
	method={{ngx.req.get_method()}}
	real path={{ngx.var.request_uri}}
	query={{ngx.var.query_string or ""}}
	request_version={{ngx.req.http_version()}}
	request_uri={{ngx.var.scheme.."://"..ngx.var.host..":"..ngx.var.server_port..ngx.var.request_uri}}

Request Headers:
{% for i, key in ipairs(keys) do %}
	{{key}}={{headers[key]}}
{% end %}

Server values:
	server_version=nginx: {{ngx.var.nginx_version}} - lua: {{ngx.config.ngx_lua_version}}

]])
	}

	server {
		listen 8080 default_server reuseport;

		server_name _;

		location / {
			lua_need_request_body on;
			content_by_lua_block {
				ngx.header["Server"] = "kube-diag nginx server"

				local headers = ngx.req.get_headers()
				local keys = {}
				for key, val in pairs(headers) do
					table.insert(keys, key)
				end
				table.sort(keys)

				ngx.say(tmpl({os=os, ngx=ngx, keys=keys, headers=headers}))
			}
		}
	}
}
